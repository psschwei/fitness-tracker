name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Qt6 dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y qt6-base-dev qt6-tools-dev
        
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.13
      with:
        cmake-version: '3.26.0'
        
    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$GITHUB_REF" >> $GITHUB_OUTPUT
        
    - name: Build application
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS_RELEASE="-O3 -DNDEBUG" ..
        make -j$(nproc)
        cd ..
        
    - name: Create release package
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        RELEASE_NAME="fitness-tracker-${VERSION}"
        RELEASE_DIR="release/${RELEASE_NAME}"
        
        # Create release directory
        mkdir -p "$RELEASE_DIR"
        
        # Copy executable
        cp build/bin/fitness-tracker "$RELEASE_DIR/"
        
        # Copy documentation
        cp README.md "$RELEASE_DIR/"
        cp LICENSE "$RELEASE_DIR/"
        
        # Create desktop file for Linux
        cat > "$RELEASE_DIR/fitness-tracker.desktop" << 'EOF'
        [Desktop Entry]
        Version=1.0
        Type=Application
        Name=Fitness Tracker
        Comment=Desktop fitness tracking application
        Exec=fitness-tracker
        Icon=fitness-tracker
        Categories=Health;Sports;
        Terminal=false
        EOF
        
        # Create install script
        cat > "$RELEASE_DIR/install.sh" << 'EOF'
        #!/bin/bash
        
        # Install script for Fitness Tracker
        
        set -e
        
        echo "Installing Fitness Tracker..."
        
        # Determine installation directory
        if [ "$EUID" -eq 0 ]; then
            INSTALL_DIR="/usr/local/bin"
            DESKTOP_DIR="/usr/share/applications"
            ICON_DIR="/usr/share/icons/hicolor/256x256/apps"
        else
            INSTALL_DIR="$HOME/.local/bin"
            DESKTOP_DIR="$HOME/.local/share/applications"
            ICON_DIR="$HOME/.local/share/icons/hicolor/256x256/apps"
        fi
        
        # Create directories
        mkdir -p "$INSTALL_DIR"
        mkdir -p "$DESKTOP_DIR"
        mkdir -p "$ICON_DIR"
        
        # Install executable
        cp fitness-tracker "$INSTALL_DIR/"
        chmod +x "$INSTALL_DIR/fitness-tracker"
        
        # Install desktop file
        cp fitness-tracker.desktop "$DESKTOP_DIR/"
        
        # Install icon (if available)
        if [ -f "fitness-tracker.png" ]; then
            cp fitness-tracker.png "$ICON_DIR/"
        fi
        
        echo "Installation complete!"
        echo "You can now run 'fitness-tracker' from anywhere."
        echo "The application will also appear in your application menu."
        EOF
        
        chmod +x "$RELEASE_DIR/install.sh"
        
        # Create uninstall script
        cat > "$RELEASE_DIR/uninstall.sh" << 'EOF'
        #!/bin/bash
        
        # Uninstall script for Fitness Tracker
        
        set -e
        
        echo "Uninstalling Fitness Tracker..."
        
        # Determine installation directory
        if [ "$EUID" -eq 0 ]; then
            INSTALL_DIR="/usr/local/bin"
            DESKTOP_DIR="/usr/share/applications"
            ICON_DIR="/usr/share/icons/hicolor/256x256/apps"
        else
            INSTALL_DIR="$HOME/.local/bin"
            DESKTOP_DIR="$HOME/.local/share/applications"
            ICON_DIR="$HOME/.local/share/icons/hicolor/256x256/apps"
        fi
        
        # Remove executable
        rm -f "$INSTALL_DIR/fitness-tracker"
        
        # Remove desktop file
        rm -f "$DESKTOP_DIR/fitness-tracker.desktop"
        
        # Remove icon
        rm -f "$ICON_DIR/fitness-tracker.png"
        
        echo "Uninstallation complete!"
        EOF
        
        chmod +x "$RELEASE_DIR/uninstall.sh"
        
        # Create a simple run script for testing
        cat > "$RELEASE_DIR/run.sh" << 'EOF'
        #!/bin/bash
        
        # Simple run script for testing the release
        
        ./fitness-tracker
        EOF
        
        chmod +x "$RELEASE_DIR/run.sh"
        
        # Create tarball
        cd release
        tar -czf "${RELEASE_NAME}.tar.gz" "$RELEASE_NAME"
        cd ..
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/fitness-tracker-${{ steps.get_version.outputs.version }}.tar.gz
        body: |
          ## Fitness Tracker ${{ steps.get_version.outputs.version }}
          
          ### What's New
          - Release of Fitness Tracker version ${{ steps.get_version.outputs.version }}
          
          ### Installation
          1. Download the tarball
          2. Extract: `tar -xzf fitness-tracker-${{ steps.get_version.outputs.version }}.tar.gz`
          3. Run the install script: `./install.sh`
          
          ### Features
          - Desktop fitness tracking application
          - Workout management
          - Body composition tracking
          - Exercise library
          
          ### System Requirements
          - Linux with Qt6 support
          - C++17 compatible compiler
          
          ### Build Information
          - Built with Qt6
          - Release optimizations enabled
          - Compiled on Ubuntu 22.04
          
          ### Files Included
          - `fitness-tracker` - Main executable
          - `install.sh` - Installation script
          - `uninstall.sh` - Uninstallation script
          - `run.sh` - Test run script
          - `README.md` - Documentation
          - `LICENSE` - License file
          - `fitness-tracker.desktop` - Desktop integration
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fitness-tracker-${{ steps.get_version.outputs.version }}
        path: |
          build/bin/fitness-tracker
          release/fitness-tracker-${{ steps.get_version.outputs.version }}.tar.gz
        retention-days: 30 